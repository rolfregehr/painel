[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nossa Sa√∫de em Dados",
    "section": "",
    "text": "Doen√ßa isqu√™mica do cora√ß√£o ‚úÖ\nCID I20 a I25 \n\n\nPneumonia üöß\nCID J12 a J18 \n\n\nDiabetes üöß\nCID E10 a E14\n\n\nHemorragia intracerebral ou oclus√£o üöß\nCID I61; I630 a I635; I638; I639; I64 a I66"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sobre",
    "section": "",
    "text": "Dados com informa√ß√µes de sa√∫de a partir de dados oficiais.\nCriado e mantido por Rolf Regehr. rolf.regehr@gmail.com"
  },
  {
    "objectID": "dic.html",
    "href": "dic.html",
    "title": "",
    "section": "",
    "text": "d3 = require(\"d3@7\")\n\n// C√©lula 2: Carregamento dos dados\ndata = FileAttachment(\"fontes/dic_genero_idade.json\").json()\n\n// C√©lula 3: Slider de range duplo\nviewof ageRange = {\n  const form = html`&lt;div style=\"font-family: sans-serif;\"&gt;\n    &lt;label style=\"font-weight: bold; margin-bottom: 10px; display: block;\"&gt;\n      Filtro de Idade: &lt;span id=\"range-display\"&gt;0 - 100 anos&lt;/span&gt;\n    &lt;/label&gt;\n    &lt;div style=\"position: relative; width: 100%; height: 50px; margin: 20px 0;\"&gt;\n      &lt;!-- Track de fundo --&gt;\n      &lt;div style=\"position: absolute; top: 22px; left: 0; right: 0; height: 6px; background: #ddd; border-radius: 3px;\"&gt;&lt;/div&gt;\n      &lt;!-- Track do range selecionado --&gt;\n      &lt;div id=\"range-track\" style=\"position: absolute; top: 22px; height: 6px; background: #007bff; border-radius: 3px;\"&gt;&lt;/div&gt;\n      &lt;!-- Slider do m√≠nimo --&gt;\n      &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"0\" step=\"1\" id=\"min-slider\"\n             style=\"position: absolute; width: 100%; height: 6px; background: transparent; -webkit-appearance: none; outline: none;\"&gt;\n      &lt;!-- Slider do m√°ximo --&gt;\n      &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"100\" step=\"1\" id=\"max-slider\"\n             style=\"position: absolute; width: 100%; height: 6px; background: transparent; -webkit-appearance: none; outline: none;\"&gt;\n    &lt;/div&gt;\n\n  &lt;/div&gt;`;\n  \n  const minSlider = form.querySelector('#min-slider');\n  const maxSlider = form.querySelector('#max-slider');\n  const display = form.querySelector('#range-display');\n  const rangeTrack = form.querySelector('#range-track');\n  \n  // Estilizar os sliders\n  const style = html`&lt;style&gt;\n    #min-slider, #max-slider {\n      pointer-events: none;\n    }\n    \n    #min-slider::-webkit-slider-thumb, #max-slider::-webkit-slider-thumb {\n      pointer-events: all;\n      -webkit-appearance: none;\n      appearance: none;\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      cursor: pointer;\n      border: 3px solid white;\n      box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n    }\n    \n    #min-slider::-webkit-slider-thumb {\n      background: #007bff;\n    }\n    \n    #max-slider::-webkit-slider-thumb {\n      background: #28a745;\n    }\n    \n    #min-slider::-moz-range-thumb, #max-slider::-moz-range-thumb {\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      cursor: pointer;\n      border: 3px solid white;\n      box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n      border: none;\n    }\n    \n    #min-slider::-moz-range-thumb {\n      background: #007bff;\n    }\n    \n    #max-slider::-moz-range-thumb {\n      background: #28a745;\n    }\n    \n    #min-slider::-webkit-slider-track, #max-slider::-webkit-slider-track {\n      background: transparent;\n      border: none;\n    }\n    \n    #min-slider::-moz-range-track, #max-slider::-moz-range-track {\n      background: transparent;\n      border: none;\n    }\n  &lt;/style&gt;`;\n  \n  document.head.appendChild(style);\n  \n  let isDragging = false;\n  let dragTarget = null;\n  \n  // Atualizar a visualiza√ß√£o do range\n  function updateRangeTrack() {\n    const min = parseInt(minSlider.value);\n    const max = parseInt(maxSlider.value);\n    const minPercent = (min / 100) * 100;\n    const maxPercent = (max / 100) * 100;\n    \n    rangeTrack.style.left = minPercent + '%';\n    rangeTrack.style.width = (maxPercent - minPercent) + '%';\n  }\n  \n  // Fun√ß√£o para atualizar valores\n  function updateValues() {\n    let min = parseInt(minSlider.value);\n    let max = parseInt(maxSlider.value);\n    \n    // Trocar valores se necess√°rio, mas manter o que est√° sendo arrastado\n    if (min &gt; max) {\n      if (dragTarget === minSlider) {\n        // Se estou arrastando o m√≠nimo e passou do m√°ximo, \n        // o m√≠nimo vira m√°ximo e vice-versa\n        [minSlider.value, maxSlider.value] = [maxSlider.value, minSlider.value];\n        [min, max] = [max, min];\n      } else if (dragTarget === maxSlider) {\n        // Se estou arrastando o m√°ximo e passou do m√≠nimo,\n        // o m√°ximo vira m√≠nimo e vice-versa  \n        [minSlider.value, maxSlider.value] = [maxSlider.value, minSlider.value];\n        [min, max] = [max, min];\n      }\n    }\n    \n    display.textContent = `${Math.min(min, max)} - ${Math.max(min, max)} anos`;\n    form.value = [Math.min(min, max), Math.max(min, max)];\n    form.dispatchEvent(new CustomEvent(\"input\"));\n    \n    updateRangeTrack();\n  }\n  \n  // Event listeners para detectar in√≠cio do arraste\n  minSlider.addEventListener(\"mousedown\", () =&gt; {\n    isDragging = true;\n    dragTarget = minSlider;\n  });\n  \n  maxSlider.addEventListener(\"mousedown\", () =&gt; {\n    isDragging = true;\n    dragTarget = maxSlider;\n  });\n  \n  // Event listeners para input\n  minSlider.addEventListener(\"input\", updateValues);\n  maxSlider.addEventListener(\"input\", updateValues);\n  \n  // Resetar quando soltar\n  document.addEventListener(\"mouseup\", () =&gt; {\n    isDragging = false;\n    dragTarget = null;\n  });\n  \n  // Permitir clique na track para mover o slider mais pr√≥ximo\n  rangeTrack.parentElement.addEventListener(\"click\", (e) =&gt; {\n    if (isDragging) return;\n    \n    const rect = rangeTrack.parentElement.getBoundingClientRect();\n    const clickPercent = (e.clientX - rect.left) / rect.width;\n    const clickValue = Math.round(clickPercent * 100);\n    \n    const minVal = parseInt(minSlider.value);\n    const maxVal = parseInt(maxSlider.value);\n    \n    // Mover o slider mais pr√≥ximo do clique\n    if (Math.abs(clickValue - minVal) &lt; Math.abs(clickValue - maxVal)) {\n      minSlider.value = clickValue;\n    } else {\n      maxSlider.value = clickValue;\n    }\n    \n    updateValues();\n  });\n  \n  // Inicializar\n  updateRangeTrack();\n  form.value = [0, 100];\n  return form;\n}\n\n// C√©lula 4: Extrair valores do range\nminAge = ageRange[0]\nmaxAge = ageRange[1]\n\n// C√©lula 5: Dados filtrados\nfilteredData = data.filter(d =&gt; d.idade &gt;= minAge && d.idade &lt;= maxAge)\n\n// C√©lula 6: Estat√≠sticas\nmd`**Estat√≠sticas do filtro atual:**\n- Idade: ${minAge} a ${maxAge} anos\n- Total Masculino: ${d3.sum(filteredData, d =&gt; d.Masc).toLocaleString()}\n- Total Feminino: ${d3.sum(filteredData, d =&gt; d.Fem).toLocaleString()}\n- Total Geral: ${d3.sum(filteredData, d =&gt; d.Masc + d.Fem).toLocaleString()}\n- Registros: ${filteredData.length} faixas et√°rias`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\nwidth: 1400,\n  height: 600,\n  marginLeft: 60,\n  marginBottom: 60,\n  style: { fontSize: \"18px\" }, // aumenta ticks/labels de ambos os eixos\n  x: {\n    label: \"Idade\",\n    tickSize: 6,\n    fontSize: 100    // aumenta n√∫meros no eixo X\n  },\n  y: { \n    grid: true,\n  },\n  color: {scheme: \"RdYlBu\"},\n  marks: [\n    Plot.areaY(filteredData, {\n      x: \"idade\",\n      y1: \"Masc\",\n      y2: \"Fem\",\n      curve: \"step-after\",\n      fill: (d) =&gt; (d[\"Masc\"] &lt; d[\"Fem\"] ? \"#FED789FF\" : \"#72874E80\"),\n      z: null\n    }),\n    Plot.lineY(filteredData, {\n      x: \"idade\",\n      y: \"Fem\",\n      curve: \"step-after\",\n      stroke: \"steelblue\",\n      strokeWidth: 3\n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\necharts = require(\"echarts@5\")\n\n\n// Ler dados do arquivo JSON\ndic_raca_cor_idade = FileAttachment(\"./fontes/dic_raca_cor_idade.json\").json()// Filtrar dados para idades de 0 a 100\n// Filtrar dados para idades de 0 a 100\ndados_filtrados = dic_raca_cor_idade.filter(d =&gt; d.idade &gt;= 0 && d.idade &lt;= 100)\n\nchart = {\n  const chartDom = DOM.element('div', { style: 'width: 600px; height: 400px;' });\n  const myChart = echarts.init(chartDom);\n  \n  // Extrair as idades para o eixo X (agora filtradas)\n  const idades = dados_filtrados.map(d =&gt; d.idade);\n  \n  // Extrair as ra√ßas/cores (excluindo 'idade')\n  const racas = Object.keys(dados_filtrados[0]).filter(key =&gt; key !== 'idade');\n  \n  // Encontrar os picos para Branca, Preta e Parda\n  const racasParaMarcar = ['Branca', 'Preta', 'Parda'];\n  \n  const option = {\n    title: {\n      text: 'Distribui√ß√£o por Ra√ßa/Cor e Idade (0 a 100 anos)'\n    },\n    tooltip: {\n      trigger: 'axis'\n    },\n    legend: {\n      data: racas,\n      bottom: 10\n    },\n    grid: {\n      left: '3%',\n      right: '4%',\n      bottom: '15%',\n      containLabel: true\n    },\n    toolbox: {\n      feature: {\n        saveAsImage: {}\n      }\n    },\n    xAxis: {\n      type: 'category',\n      boundaryGap: false,\n      data: idades,\n      name: 'Idade'\n    },\n    yAxis: {\n      type: 'value',\n      name: 'Quantidade'\n    },\n    // Configura√ß√µes de anima√ß√£o\n    animationDuration: 3000,\n    animationEasing: 'cubicOut',\n    series: racas.map(raca =&gt; {\n      const dados = dados_filtrados.map(d =&gt; d[raca]);\n      \n      return {\n        name: raca,\n        type: 'line',\n        data: dados\n        // Removemos o markPoint daqui\n      };\n    })\n  };\n  \n  // Renderizar o gr√°fico inicialmente sem os markPoints\n  myChart.setOption(option);\n  \n  // Adicionar markPoints ap√≥s a anima√ß√£o terminar\n  setTimeout(() =&gt; {\n    const seriesWithMarkPoints = racas.map(raca =&gt; {\n      const dados = dados_filtrados.map(d =&gt; d[raca]);\n      \n      // Se for uma das ra√ßas para marcar, adicionar markPoint\n      let markPoint = {};\n      if (racasParaMarcar.includes(raca)) {\n        const valorMaximo = Math.max(...dados);\n        const indiceMaximo = dados.indexOf(valorMaximo);\n        const idadeMaxima = dados_filtrados[indiceMaximo].idade;\n        \n        markPoint = {\n          data: [{\n            type: 'max',\n            label: {\n              show: true,\n              position: 'top',\n              formatter: `Idade no pico: ${idadeMaxima} anos`,\n              backgroundColor: 'rgba(255, 255, 255, 0.9)',\n              borderColor: '#333',\n              borderWidth: 1,\n              borderRadius: 4,\n              padding: [6, 10],\n              fontSize: 12,\n              fontWeight: 'bold'\n            },\n            symbol: 'circle',\n            symbolSize: 8\n          }],\n          animation: true,\n          animationDuration: 800\n        };\n      }\n      \n      return {\n        name: raca,\n        type: 'line',\n        data: dados,\n        markPoint: markPoint\n      };\n    });\n    \n    // Atualizar o gr√°fico com os markPoints\n    myChart.setOption({\n      series: seriesWithMarkPoints\n    });\n  }, 3100); // Esperar 3100ms (um pouco depois da anima√ß√£o das linhas)\n  \n  return chartDom;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLista de DICs\nI20 - Angina pectoris (dor tor√°cica)\nI21 - Infarto agudo do mioc√°rdio - Principal causa de mortalidade no Brasil\nI22 - Infarto do mioc√°rdio recorrente\nI23 - Algumas complica√ß√µes atuais subseq√ºentes ao infarto agudo do mioc√°rdio\nI24 - Outras doen√ßas isqu√™micas agudas do cora√ß√£o\nI25 - Doen√ßa isqu√™mica cr√¥nica do cora√ß√£o"
  }
]